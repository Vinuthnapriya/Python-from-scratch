print("hello world")
o/p:   hello world


if 4>2:
   print("4 is greater than 2")
else:
    print("4 is lesser than 2")
o/p:    4 is greater than 2


x="Hello Priya"
print(x)
o/p:   Hello Priya


#is used to display a comment in python


""" 
this 3 double quotes is used to display 
a multiline comment so that 
we dont have keep applying hashtag
for each line of comment
""" 


#if u want to specify the dataype of a variale,then it can be done by casting
x=int(5)
print(x)
y=float(5)
print(y)
z=str(5)
print(z)
o/p:
5
5.0
5


#to know the datatype used , we use the type()
z=5
print(type(z))
z=3.33
print(type(z))
z="hi"
print(type(z))
z=True 
print(type(z))
z=4>2
print(type(z))
o/p:

<class 'int'>
<class 'float'>
<class 'str'>
<class 'bool'>
<class 'bool'>


#multi words variable name types
#case 1: Camel case
mynameis = "Priya"
print(mynameis)
#Case 2: Pascal case
MyNameIs = "Priya"
print(MyNameIs)
#Case 3: Snake case
my_name_is = "Priya"
print(my_name_is)
o/p:

Priya
Priya
Priya


Variable names can start with a alphanumeric and underscores but 
not with spaces, numbers and special symbols


#If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking.
sports=['basketball,', "table tennis,", "throwball"]
x,y,z=sports
print(x,y,z)
o/p:
basketball, table tennis, throwball


#The Python print() function is often used to output variables.
In the print() function, when you try to combine a string and a number with the + operator, Python will give you an error
x = 5
y = "John"
print(x + y)
o/p:    TypeError: unsupported operand type(s) for +: 'int' and 'str'
The best way to output multiple variables in the print() function is to separate them with commas, which even support different data types:
Example
x = 5
y = "John"
print(x, y)
o/p:   5 John



x = "Python "
y = "is "
z = "awesome"
print(x + y + z)
o/p:  Python is awesome



x= "Vinuthna Priya" #here x is a global variable
def mine():   #this is a function
    print("The only and only miss " +  x)
mine()

o/p:
The only and only miss Vinuthna Priya




x = "awesome" #global variable
def myfunc():
  x = "fantastic"   #local variable
  print("Python is " + x)
myfunc()
print("Python is " + x)
o/p:
Python is fantastic
Python is awesome



To create a global variable inside a function, you can use the global keyword.
Example
If you use the global keyword, the variable belongs to the global scope:

def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)
o/p:
Python is fantastic



Python has the following data types built-in by default, in these categories:
Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
None Type:	NoneType




x = "Hello World"	#str	
print(x)
x = 20	#int	
print(x)
x = 20.5	#float	
print(x)
x = 1j	#complex	
print(x)
x = ["apple", "banana", "cherry"]	#list	
print(x)
x = ("apple", "banana", "cherry")	#tuple	
print(x)
x = range(6)	#range	
print(x)
x = {"name" : "John", "age" : 36}	#dict	
print(x)
x = {"apple", "banana", "cherry"}	#set	
print(x)
x = frozenset({"apple", "banana", "cherry"})	#frozenset	
print(x)
x = True	#bool	
print(x)
x = b"Hello"	#bytes	
print(x)
x = bytearray(5)	#bytearray	
print(x)
x = memoryview(bytes(5))	#memoryview	
print(x)
x = None
print(x)

o/p:
Hello World
20
20.5
1j
['apple', 'banana', 'cherry']
('apple', 'banana', 'cherry')
range(0, 6)
{'name': 'John', 'age': 36}
{'apple', 'banana', 'cherry'}
frozenset({'apple', 'banana', 'cherry'})
True
b'Hello'
bytearray(b'\x00\x00\x00\x00\x00')
<memory at 0x7f80cdae67a0>
None




Float can also be scientific numbers with an "e" to indicate the power of 10.
eg: x = 35e3
y = 12E4
z = -87.7e100

print(type(x))
print(type(y))
print(type(z))
o/p:
<class 'float'>
<class 'float'>
<class 'float'>



conversions:
#convert from int to float:
x = float(1)

#convert from float to int:
y = int(2.8)

#convert from int to complex:
z = complex(1)

print(x)
print(y)
print(z)

print(type(x))
print(type(y))
print(type(z))
o/p:
1.0
2
(1+0j)
<class 'float'>
<class 'int'>
<class 'complex'>


RANDOM NUMBER:
Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers:
Example
Import the random module, and display a random number between 1 and 9:

import random

print(random.randrange(1, 10))
o/p:
3


#string as an array
a = "Hello, World!"
print(a[1])
o/p:
o


#Loop through the letters in the word "banana":
for x in "banana":
  print(x)
o/p:
b
a
n
a
n
a



The len() function returns the length of a string:
a = "Hello, World!"
print(len(a))
o/p:
13


Check if "free" is present in the following text:
txt = "The best things in life are free!"
print("free" in txt)
o/p:
True




